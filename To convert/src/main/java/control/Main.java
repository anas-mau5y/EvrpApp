package control;
import java.util.Random;


public class Main {
    public static int TERMINATION;

    /****************************************************************/
    public static void main(String[] args) throws Exception {
        // read the file name from the args
        if (args.length<2) {
            System.err.println("Args are not supplied : ");
            System.exit(2);
        }
        String param = args[0];
        if(param.equals("-f")){
            EVRP.problem_instance = args[1];
        }
        int run;
        /*Step 1*/
        EVRP.read_problem();   //Read EVRP from file from EVRP.h
        TERMINATION = (25000 * EVRP.dimensions) + EVRP.numberOfStations;

        /*Step 2*/
        Stats.open_stats();//open text files to store the best values from the 20 runs stats.h

        for (run = 1; run <= EVRP.MAX_TRIALS; run++) {
            /*Step 3*/
            start_run(run);
            //Initialize your heuristic here
            EVRP.initialize_heuristic();

            /*Step 4*/
            //Execute your heuristic
            while (!termination_condition()) {
                Heuristic.run_heuristic();
            }
            //print_solution(best_sol->tour,best_sol->steps);
            //check_solution(best_sol->tour,best_sol->steps);
      /*Note that the solution generated by the random heuristic may not
      be feasisble in terms of energy when check_solution is utilized.
      The implementation is only for your reference*/
            /*Step 5*/
            end_run(run);  //store the best solution quality for each run
        }
        /*Step 6*/
        Stats.close_stats(); //close text files to calculate the mean result from the 20 runs stats.h
    }

    /*initialiazes a run for your heuristic*/
    static void start_run(int r) {

        r = new Random().nextInt(r);
        EVRP.evals = 0;
        EVRP.current_best = 0;
        System.out.println("Run: " + r + " with random seed " + r);
    }

    /*gets an observation of the run for your heuristic*/
    static void end_run(int r) {
        Stats.get_mean(r - 1, EVRP.current_best); //from stats.h
        System.out.println("End of run " + r + " with best solution quality "
                + EVRP.current_best + " total evaluations: " + EVRP.evals);
    }


    /****************************************************************/
    /*                Main Function                                 */

    /*sets the termination conidition for your heuristic*/
    static boolean termination_condition() {

        boolean flag;
        flag = EVRP.evals >= TERMINATION;

        return flag;
    }

}